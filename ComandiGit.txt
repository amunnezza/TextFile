innanzitutto entra in una directory e fai 
git init // crea un repository
ls -A // mostra tutti i file che git crea


git help NomeComando

git config --global user.name "Nome da usare"

git config --global user.email "mail@daUsare.com" // quella che usi su git-hub.com

touch nomefile.txt    // per creare un nuovo file

git config --global core.editor notepad++  // per decidere quale editor usare

git status   //  mostra se ci sono delle cose aggiunte ma non ancora prese in considerazione

git add NomeFile.txt // dice di fare Track del NomeFile.txt

//nota bene tra modifica del file e il comnado git add nomeFile.txt posso fare
git diff   // mi dice quale è la differenza rispetto a quello gia in stage o in commit


nota bene la gestione dei commit puoi farla 
gitk --all // interfaccia grafica carina e funzionante

$ git log // mostra tutti i log
$ git log -1 // mostra solo l'ultimo

// se cambi il file e poi 
$ git add nomeFile.txt
 
$ git status // ti dice non ancora commitato
 
// ora git diff  NON ti da nulla!!
// Perchè non cì sono differenxe tra il file in lavorazione e quello in stage!!
// ma facendo 
$ git diff --staged   // mostra differenze tra file staged e quello gia committato

// nota bene posso vedere differenze tra i vari commit 
CON IL COMANDO
git diff "hash del commit che mi interessa"
PER FARLO USO IL CONCETTO DI "HEAD" CHE SI VEDE NEL git log . 	HEAD E' L'ULTIMO COMMIT VALIDO E PER 
TORNARE AD UNO STADIO PRECEDENTE PUOI FARE 	
git checkout~3 (torna indietro di tre) 


PER TORNARE INDIETRO SU UN SINGOLO FILE PUOI FARE
git checkout HEAD~3 list.txt

OPPURE TORNARE ALLA PRINCIPALE INIZIALE CON 
git checkout HEAD list.txt




