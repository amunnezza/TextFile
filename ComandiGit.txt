innanzitutto entra in una directory e fai 
git init // crea un repository
ls -A // mostra tutti i file che git crea


git help NomeComando

git config --global user.name "Nome da usare"

git config --global user.email "mail@daUsare.com" // quella che usi su git-hub.com

touch nomefile.txt    // per creare un nuovo file

git config --global core.editor notepad++  // per decidere quale editor usare

git status   //  mostra se ci sono delle cose aggiunte ma non ancora prese in considerazione

git add NomeFile.txt // dice di fare Track del NomeFile.txt

//nota bene tra modifica del file e il comnado git add nomeFile.txt posso fare
git diff   // mi dice quale è la differenza rispetto a quello gia in stage o in commit


nota bene la gestione dei commit puoi farla 
gitk --all // interfaccia grafica carina e funzionante

$ git log // mostra tutti i log
$ git log -1 // mostra solo l'ultimo

// se cambi il file e poi 
$ git add nomeFile.txt
 
// per aggiungere tutti fai 
$ git add --all
$ git status // ti dice non ancora commitato
$ git commit -am "messaggio di commit"

// ora git diff  NON ti da nulla!!
// Perchè non cì sono differenxe tra il file in lavorazione e quello in stage!!
// ma facendo 
$ git diff --staged   // mostra differenze tra file staged e quello gia committato

// nota bene posso vedere differenze tra i vari commit 
CON IL COMANDO
git diff "hash del commit che mi interessa"
PER FARLO USO IL CONCETTO DI "HEAD" CHE SI VEDE NEL git log . 	HEAD E' L'ULTIMO COMMIT VALIDO E PER 
TORNARE AD UNO STADIO PRECEDENTE PUOI FARE 	
git checkout~3 (torna indietro di tre) 


PER TORNARE INDIETRO SU UN SINGOLO FILE PUOI FARE
git checkout HEAD~3 list.txt

OPPURE TORNARE ALLA PRINCIPALE INIZIALE CON 
git checkout HEAD list.txt


// SA FACCIO DEGLI ERRORI SUI FILE POSSO TORNARE INDIETRO 
// SUPPONGO DI AVERE AGGIUNTO QUALCOSA DI SBABLIATO SU list.txt  E HO GIA FATTO
git add list.txt
git commit -m "ho fatto qui errore"

PER CORREGERE

git reset HEAD~1   // il file cambiato sbagliato rimane in staging
git reset HEAD~1 --mixed // il file cambiato viene tolto dallo staging ma le modifiche rimandono sul file sys
git reset HEAD~1 --hard // come mixed ma cambia anche il file sul file sys

BRANCH
	Creiamo due ulteriori branch uno per dairy e l'altro per meat
	IL VANTAGGIO EVIDENTE E CHE POSSO AVERE DUE TEAM CHE LAVORANO SU PARTI DIVERSE ANCHE DELLO STESSO FILE 
	SENZA DARSI FASTIDIO. PER ESEMPIO SUPPONIAMO DI AVER UN TEAM CHE LAVORA SULLA PARTE DAIRY 	E UN ALTRO SULLA
	PATE MEAT. ALLORA 	
$ git branch ( mi dice quali branch ci sono e quello attivo al momneto)
//IN PRIMA ISTANZA HO SOLO *master con asterisco che MI DICE QUALE E QUELLO ATTIVO
git branch meat // crea il branch meat
git branch dairy // crea il branch dairy
// POI MI SPOSTO SUL BRANCH AD ES. DAIRY
git checkout DAIRY
// E MENTRE SONO SU DAIRY modifico list.txt aggiungendo qualcosa sotto dairy ad es. milk , egg ecc. 
// add e commit 
$git add list.txt
$ git commit -m "aggiunte voci a dairy"  //MA E COMMIT VISUALIZZABILE SOOLO DAL BRANCH DAIRY 
// SE TORNO SU MASTER O SULL'ALTRO BRANCH LE MODIFICHE NON SONO VISIBILI
// INFATTI FACENDO 
$ git checkout master // se controlo list.txt le modifiche fatte in BRANCH dairy non sono visibili
/// ANALOGAMENTE SU MEAT POSSO FARE
$ git checkout MEAT
$ notepad++ list.txt
// AGGIUNGO DELLE VOCI IN MEAT
	git add list.txt
	git commit -m "aggiunta della carne"
// ache qui se torno in branch master 
$ git checkout master
$ notepad++ list.txt // il file risulta non cambiato



QUINDI CAPITO L'UTILITA A UN CERTO PUNTO DEVO FONDERE LE DUE BRANCH IN MASTER
PER FARLO PRIMA ENTRO IN MASTER
$ git checkout master
POI FACCIO IL MERGE
$ git merge meat  // controlla che ha aggiunto meat
$ git merge DAIRY // CONTROLLA CHE HA AGGIUNTO DAIRY



GIT HUD 

crea un repository su git-hub.com
per es. TextFile
e SINCRONIZZA IL NOSTRO REPOSITORY CON QUELLO SUL GIT HUB USANDO REMOTE 

$ git remote add origin "https://github.com/amunnezza/TextFile.git"   // LEGGERE 	git help remote
// CREATO UN ALIAS origin per l'url scritto
// se faccio 
& git remote -v // mi da l'url del repository remoto
// a questo punto posso FARE IL PUSH DEL REPOSITORY
$ git push origin master  // da dovE? origin che è un alias Che cosa? il branch master

//rimane da vedere clone di un repository
// CHIARAMENTE OTTIMA IDEA FARE IN UN ALTRA DIRECTORY
mkdir newDir
cd newDir

$ git clone "URL CHE MI INTERESSA" 

VEDERE PèOI DA SOLO I COMANDI
git fetch 
git pull 
// NECESSARI PER LAVORI IN GRUPPO



